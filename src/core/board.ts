import type { Cell, Grid, PieceKind } from './types'; import { COLUMNS, ROWS } from './constants'; export class Board { grid: Grid; constructor(){ this.grid = Array.from({length: ROWS}, ()=> Array.from({length: COLUMNS}, ()=> 0 as Cell)); } inside(x:number,y:number){ return x>=0 && x<COLUMNS && y<ROWS; } empty(x:number,y:number){ return y<0 || this.grid[y][x]===0; } lock(kind:PieceKind, shape:number[][], x:number, y:number){ for (let dy=0; dy<shape.length; dy++){ for (let dx=0; dx<shape[dy].length; dx++){ if (shape[dy][dx]){ const bx=x+dx, by=y+dy; if (by>=0 && by<ROWS && bx>=0 && bx<COLUMNS){ this.grid[by][bx]=kind; } } } } } clearLines(): number[]{ const full: number[]=[]; for (let i=0;i<this.grid.length;i++){ if (this.grid[i].every(c=>c!==0)) full.push(i); } if (full.length===0) return []; const newGrid: Grid=[]; let cleared=0; for (let i=0;i<this.grid.length;i++){ if (!full.includes(i)) newGrid.push(this.grid[i]); else cleared++; } for (let k=0;k<cleared;k++){ newGrid.unshift(Array.from({length:COLUMNS},()=>0 as Cell)); } this.grid=newGrid; return full; } isGameOver(): boolean { return this.grid[0].some(c=>c!==0); } }